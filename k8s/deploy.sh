#!/bin/bash

# Script deploy Kubernetes cho microservices project
echo "üöÄ B·∫Øt ƒë·∫ßu deploy microservices l√™n Kubernetes..."

# Ki·ªÉm tra kubectl
if ! command -v kubectl &> /dev/null; then
    echo "‚ùå kubectl ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i ƒë·∫∑t kubectl tr∆∞·ªõc."
    exit 1
fi

# Ki·ªÉm tra Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i ƒë·∫∑t Docker tr∆∞·ªõc."
    exit 1
fi

# Ki·ªÉm tra k·∫øt n·ªëi Kubernetes
if ! kubectl cluster-info &> /dev/null; then
    echo "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi Kubernetes cluster. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh kubectl."
    exit 1
fi

echo "‚úÖ Ki·ªÉm tra m√¥i tr∆∞·ªùng th√†nh c√¥ng!"

# Build Docker images
echo "üî® Building Docker images..."

# Build order-service
echo "Building order-service..."
cd ../order-service
docker build -t order-service:latest .
if [ $? -ne 0 ]; then
    echo "‚ùå Build order-service th·∫•t b·∫°i!"
    exit 1
fi

# Build notification-service
echo "Building notification-service..."
cd ../notification-service
docker build -t notification-service:latest .
if [ $? -ne 0 ]; then
    echo "‚ùå Build notification-service th·∫•t b·∫°i!"
    exit 1
fi

# Build frontend
echo "Building frontend..."
cd ../frontend
docker build -t frontend:latest .
if [ $? -ne 0 ]; then
    echo "‚ùå Build frontend th·∫•t b·∫°i!"
    exit 1
fi

cd ../k8s

echo "‚úÖ Build images th√†nh c√¥ng!"

# Apply Kubernetes manifests
echo "üì¶ Deploy l√™n Kubernetes..."

# T·∫°o namespace
echo "T·∫°o namespace..."
kubectl apply -f namespace.yaml

# Deploy Zookeeper
echo "Deploy Zookeeper..."
kubectl apply -f zookeeper.yaml

# Ch·ªù Zookeeper ready
echo "Ch·ªù Zookeeper kh·ªüi ƒë·ªông..."
kubectl wait --for=condition=available --timeout=300s deployment/zookeeper -n microservices

# Deploy Kafka
echo "Deploy Kafka..."
kubectl apply -f kafka.yaml

# Ch·ªù Kafka ready
echo "Ch·ªù Kafka kh·ªüi ƒë·ªông..."
kubectl wait --for=condition=available --timeout=300s deployment/kafka -n microservices

# Deploy services
echo "Deploy Order Service..."
kubectl apply -f order-service.yaml

echo "Deploy Notification Service..."
kubectl apply -f notification-service.yaml

echo "Deploy Frontend..."
kubectl apply -f frontend.yaml

# Deploy Ingress (t√πy ch·ªçn)
read -p "B·∫°n c√≥ mu·ªën deploy Ingress controller kh√¥ng? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "Deploy Ingress..."
    kubectl apply -f ingress.yaml
    echo "‚úÖ Ingress deployed! Th√™m 'microservices.local' v√†o /etc/hosts ƒë·ªÉ truy c·∫≠p"
fi

# Ch·ªù t·∫•t c·∫£ services ready
echo "Ch·ªù t·∫•t c·∫£ services kh·ªüi ƒë·ªông..."
kubectl wait --for=condition=available --timeout=300s deployment/order-service -n microservices
kubectl wait --for=condition=available --timeout=300s deployment/notification-service -n microservices
kubectl wait --for=condition=available --timeout=300s deployment/frontend -n microservices

echo "üéâ Deploy th√†nh c√¥ng!"

# Hi·ªÉn th·ªã th√¥ng tin services
echo ""
echo "üìä Th√¥ng tin services:"
kubectl get pods -n microservices
echo ""
kubectl get services -n microservices

# H∆∞·ªõng d·∫´n truy c·∫≠p
echo ""
echo "üåê ƒê·ªÉ truy c·∫≠p ·ª©ng d·ª•ng:"
echo "1. N·∫øu ƒë√£ deploy Ingress:"
echo "   - Th√™m v√†o /etc/hosts: echo '127.0.0.1 microservices.local' | sudo tee -a /etc/hosts"
echo "   - Truy c·∫≠p: http://microservices.local"
echo ""
echo "2. LoadBalancer (Cloud providers):"
echo "   kubectl get service frontend -n microservices"
echo ""
echo "3. Minikube:"
echo "   minikube service frontend -n microservices"
echo ""
echo "4. Port-forward (Local):"
echo "   kubectl port-forward service/frontend 3000:3000 -n microservices"
echo "   Sau ƒë√≥ truy c·∫≠p: http://localhost:3000"

echo ""
echo "üîç ƒê·ªÉ xem logs:"
echo "   kubectl logs -f deployment/order-service -n microservices"
echo "   kubectl logs -f deployment/notification-service -n microservices"
echo "   kubectl logs -f deployment/frontend -n microservices" 